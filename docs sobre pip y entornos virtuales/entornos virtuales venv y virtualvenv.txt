Los entornos virtuales dan solución a qué pasa si nuestro proyecto necesita unos módulos con unas versiones específicas, y otro proyecto necesita otras versiones...
O si simplemente no tenemos permisos para instalar algo por el motivo que sea,..
La solución es crear un nuevo entorno virtual, que sea el todo, aislado del resto del sistema.

Sirven para independizar el entorno según las necesidades del paquete que estemos utilizando o desarrollando (intérprete de Python a utilizar, módulos instalados). Así, nos haremos un entorno a medida, en el que sepamos que todo funciona correctamente con nuestros programas.

Se pueden crear de varias formas:

•	Módulo venv (ya viene instalado con la instalación de Python para Windows).
•	Módulo virtualenv (es como venv, pero hay que instalarlo en Mac o Linux)
•	Módulo Pipenv (versión mejorada: une pip y virtual environments en una sola herramienta)
•	Módulo Conda (viene con Anaconda, que es la versión de Python que viene muchísimos paquetes…)
•	Crearlo desde Pycharm eligiendo alguna de las opciones anteriores…


Las opciones clásicas son: virtualenv (la más antigua) y venv (más moderna, a partir de Python 3.4)
Hay otro programa recomendado ahora, que es pipenv (lo veremos en el otro documento)

Aquí veremos virtualenv y venv (que son similares, aunque mejor utilizar venv pq es más moderno)

Uso:
1º nos colocamos en el directorio del proyecto donde queremos crear el entorno virtual. Luego:
2º Crear el entorno, según el paquete (crea unas estructuras para utilizar con el entorno).
venv nombre_del_entorno
virtualenv nombre_del_entorno
Esto nos creará el directorio nombre_del_entorno con estructuras necesarias para el entorno, pero
El entorno está creado, pero NO ESTÁ ACTIVO

3º Tenemos que activarlo explícitamente...
En Mac o Linux: source <nombre_del_entorno>/bin/activate    (es simplemente la ruta al script)
En Windows: <nombre_del_entorno>/Scripts/activate  (es simplemente la ruta al script)
Obser. que si estamos en windows, pero tenemos instalado bash, podemos utilizar el comando source

Una vez que estemos con el entorno activado, pues trabajaremos, instalaremos paquetes, probaremos... etc
y todo lo que hagamos será dentro de ese entorno... 
Sabremos que está activado porque, aparte de la ruta, nos aparecerá entre paréntesis el nombre del entorno: (nombre_del_entorno) $
Obs. creo que en bash no aparece esto... podemos comprobar si estamos en el entorno de muchísimas formas, por ejemplo simplemente haciendo pip list a ver qué paquetes hay...
Observar que ya estamos en el entorno, con lo que no es necesario poner python3 (si estuviéramos en linux) ni nada especial… lo anterior sirve para cualquier instalación…

4º salir del entorno (desactivarlo)
Cuando queramos desactivar, simplemente salir del terminal, o poner, sin nada más, deactivate.

Problema!!
Managing multiple virtual environments directly can become tedious, so the dependency management tutorial introduces a higher level tool, Pipenv, that automatically manages a separate virtual environment for each project and application that you work on.
