https://pip.pypa.io/en/latest/
https://pip.pypa.io/en/latest/user_guide/

pip es la utilidad clásica para instalar paquetes Python...
(aunque hay más modernas como pipenv que combina pip con entornos virtuales)
Viene por defecto!! con Python
Pypi es el índice de paquetes de Python (pypi.org). Por defecto, pip instala los paquetes desde allí.

Uso básico:
python -m pip install somepackage
Realmente como el pip va a estar en el path valdría con:
pip install somepackage

Si queremos instalar este paquete sólo para el usuario (y así evitar permisos de acceso a carpetas del sistem) podemos usar:
pip install --user somepackage

También, si nuestro proyecto utiliza algunas versiones específicas del paquete, podemos decírselo!
Con: ==, <, <=, >, >=
Ejemplos:
python -m pip install SomePackage==1.0.4    # specific version
python -m pip install 'SomePackage>=1.0.4'  # minimum version
To install greater than or equal to one version and less than another:
pip install "SomeProject>=1,<2"
To install a version that’s “compatible” with a certain version: 
pip install "SomeProject~=1.4.2"
Esto significa instalar cualquier versión de la 1.4 que sea >= a 1.4.2

Cuando se use un operando comparador como >, < o cualquier otro carácter especial que puede ser interpretado por el intérprete de comandos, el nombre del paquete y la versión deben ir entre dobles comillas.
Note
The use of double quotes around the package and version specification (i.e. "requests>2.19") is highly recommended to avoid issues with Input and output redirection in Unix-based operating systems.
The use of ~= is preferred over the == identifier as the latter prevents from updating the packages:

Normalmente, si ya tenemos un módulo instalado y decimos pip install modulo_instalado pues pip no hace nada, aunque haya una versión posterior...
Si queremos que actualice el paquete si ya lo tuviéramos, habría que decir, suponiendo que lo hacemos para el usuario solo...

pip --user --upgrade somepackage   (creo que valdría tb. poniendo -U   creo que es lo mismo)
Lógicamente, tb. podríamos forzarlo si le decimos alguna versión específica que queramos...
pip --user  somepackage==xxxxx

Lógicamente podemos actualizar el propio pip para utilziar la versión más moderna.
En el siguiente ejemplo actualizamos pip, wheel y setuptools, ya que los otros ficheros son necesarios tb. para instalar desde source archives... veamos entonces como actualizar varios módulos a la vez...:

pip install --upgrade pip setuptools wheel


EL uso normal que hemos visto instala desde pypi.
Wheels are a pre-built distribution format that provides faster installation
pip puede instalar tanto desde source distributions (sdist) como desde Wheels.
Si ambas versiones están disponibles para algún paquete en pypi, pip preferirá wheel compatible.
Esto se puede cambiar utilizando modificador -no-binary
If pip does not find a wheel to install, it will locally build a wheel and cache it for future installs, instead of rebuilding the source distribution in the future.

SI queremos instalar desde un fichero wheel que tengamos...
pip install SomePackage-1.0-py2.py3-none-any.whl


Installing to the User Site
To install packages that are isolated to the current user, use the --user flag.
Observar que esto no tiene efecto si estamos en un entorno virtual, ya que todo va a estar sólo en ese entorno.

Requirements file
Requirements files” are files containing a list of items to be installed using pip install.
Es un fichero de texto que simplementa lista una serie de paquetes que queremos instalar.
Cada paquete va en una línea distinta y puede llevar versión como hemos visto.
pip install -r requirements.txt
Nos va a ir de línea en línea instalando todo... si en una línea hay algo así como
"paquete==1.4" o "paquete>=1.2" pues va instalando cada paquete, pero nos ahorra trabajo.
Además, si tenemos el fichero escrito con lo necesario, pues se lo podemos pasar a otros para que 
instalen todos esos paquetes.

Uso del requirements file:

Uso 1: Si nos interesa que una persona instala todos los paquetes que tenemos nosotros instalados (ya sea a nivel global, o en el entorno virtual que tenemos adaptado para nuestro proyecto) podemos generar el fichero requirements.txt utilizando pip:
pip freeze > requirements.txt
pip freeze lo que hace es generar un listado con los paquetes que están instalados en ese momento).
Requirements files are used to hold the result from pip freeze for the purpose of achieving Repeatable Installs. In this case, your requirement file contains a pinned version of everything that was installed when pip freeze was run.
Observar que con esto no está todo dicho, pq en el requirements se guarda la info sobre los paquetes, pero no sobre qué versión de Python tenmos instalada...
esto lo podríamos anotar nosotros con python --version.

Windows
# primero creamos el req. con los ficheros que tenemos en nuestro entorno
py -m pip freeze > requirements.txt   
# Y luego se lo pasamos a la gente para que lo utilice para recrear nuestro entorno!!
py -m pip install -r requirements.txt

Uso 2.También podríamos utilizar un fichero requerements.txt o crear uno nosotros que ayuda a pip para resolver de forma correcta las dependencias (realmente pip no sabe resolver dependencias...)
Ejemplo:
Requirements files are used to force pip to properly resolve dependencies. pip 20.2 and earlier doesn’t have true dependency resolution, but instead simply uses the first specification it finds for a project. E.g. if pkg1 requires pkg3>=1.0 and pkg2 requires pkg3>=1.0,<=2.0, and if pkg1 is resolved first, pip will only use pkg3>=1.0, and could easily end up installing a version of pkg3 that conflicts with the needs of pkg2. To solve this problem, you can place pkg3>=1.0,<=2.0 (i.e. the correct specification) into your requirements file directly along with the other top level requirements. Like so:

pkg1
pkg2
pkg3>=1.0,<=2.0

Uso 3: Otro uso del requirements file:
Requirements files are used to force pip to install an alternate version of a sub-dependency. For example, suppose ProjectA in your requirements file requires ProjectB, but the latest version (v1.3) has a bug, you can force pip to accept earlier versions like so:

ProjectA
ProjectB<1.3

Constraints Files
Hay algo similar al requirements, que es un fichero de constrainsts (condiciones) que no nos obliga a instalar nada sino que nos lista condiciones para el paquete, en caso de que se tuviera que instalar ese módulo...
Including a package in a constraints file does not trigger installation of the package
Lo que hacemos es decirle que, si se tuviera que isntalar el paquete, que se haga con las condicioens indicadas...
pip install -c constraints.txt




Desinstalación de paquetes.
pip uninstall SomePackage
Lógicamente, si estamos actualizando un paquete, pues antes de nada de desinstalará la versión actual obsoleta.



Listar paquetes instalados
pip list

Listar paquetes desactualizados
pip list --outdated



Ver más info de algún paquete (por ejemplo la web, las dependencias, etc)
pip show paquete
Ejemplo:
pip show sphinx
---
Name: Sphinx
Version: 1.1.3
Location: /my/env/lib/pythonx.x/site-packages
Requires: Pygments, Jinja2, docutils







Búsqueda de paquetes
pip search "query" busca entre los nombres y sumarios de los paquetes...

INSTALACIÓN DESDE PAQUETES LOCALES 
1º Instalación desde paquetes locales, para que no tenga que acudir a pypi
Lo primero, es descargarnos los ficheros que vamos a necesitar... para ello
pip download --destination-directory DIR -r requirements.txt
(DIR va a ser el directorio a donde se van a descargar los paquetes para tenerlos allí!!)
Obs que, antes de nada, se intentarán descargar desde la wheel cache, donde estarán los paquetes si ya
los hemos descargado anteriormente!!!

Observamos que, si algunos de los ficheros al descargarlo no vienieran como wheels, y quisiéramos wheels, 
podríamos hacer...
pip wheel --wheel-dir DIR -r requirements.txt

2º Ahora, ya tendríamos en local los paquetes que nos interesan....
Cömo hacer para instalarlos desde aquí para otros usaurios / euqipos...??
To install from local only, you’ll be using --find-links and --no-index like so:
pip install --no-index --find-links=DIR -r requirements.txt
____________________________________________________________





Installing from other Indexes (por si no queremos instalar desde pypi o si está en otro sitio)
pip install --index-url http://my.package.repo/simple/ SomeProject
Search an additional index during install, in addition to PyPI
pip install --extra-index-url http://my.package.repo/simple SomeProject






